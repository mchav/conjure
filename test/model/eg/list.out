length :: [Int] -> Int
-- testing 60 combinations of argument values
-- looking through 2 candidates of size 1
-- looking through 0 candidates of size 2
-- looking through 2 candidates of size 3
-- looking through 1 candidates of size 4
-- looking through 5 candidates of size 5
-- looking through 4 candidates of size 6
-- looking through 16 candidates of size 7
-- looking through 19 candidates of size 8
-- looking through 57 candidates of size 9
length xs  =  if null xs then 0 else 1 + length (tail xs)

reverse :: [Int] -> [Int]
-- testing 60 combinations of argument values
-- looking through 2 candidates of size 1
-- looking through 3 candidates of size 2
-- looking through 8 candidates of size 3
-- looking through 20 candidates of size 4
-- looking through 55 candidates of size 5
-- looking through 178 candidates of size 6
-- looking through 558 candidates of size 7
-- looking through 1802 candidates of size 8
-- looking through 5863 candidates of size 9
-- looking through 19373 candidates of size 10
-- looking through 64683 candidates of size 11
reverse xs  =  if null xs then xs else reverse (tail xs) ++ unit (head xs)

sort :: [Int] -> [Int]
-- testing 60 combinations of argument values
-- looking through 2 candidates of size 1
-- looking through 3 candidates of size 2
-- looking through 5 candidates of size 3
-- looking through 11 candidates of size 4
-- looking through 26 candidates of size 5
-- looking through 80 candidates of size 6
-- looking through 232 candidates of size 7
-- looking through 648 candidates of size 8
-- looking through 1799 candidates of size 9
-- looking through 5148 candidates of size 10
sort xs  =  if null xs then xs else insert (head xs) (sort (tail xs))

(++) :: [Int] -> [Int] -> [Int]
-- testing 60 combinations of argument values
-- looking through 3 candidates of size 1
-- looking through 3 candidates of size 2
-- looking through 11 candidates of size 3
-- looking through 38 candidates of size 4
-- looking through 82 candidates of size 5
-- looking through 283 candidates of size 6
-- looking through 982 candidates of size 7
-- looking through 3379 candidates of size 8
-- looking through 10900 candidates of size 9
-- looking through 35331 candidates of size 10
-- looking through 120334 candidates of size 11
xs ++ ys  =  if null xs then ys else head xs:(tail xs ++ ys)

length :: [Int] -> Int
-- testing 60 combinations of argument values
-- looking through 2 candidates of size 1
-- looking through 0 candidates of size 2
-- looking through 1 candidates of size 3
-- looking through 2 candidates of size 4
-- looking through 1 candidates of size 5
-- looking through 7 candidates of size 6
length xs  =  foldr (const (1 +)) 0 xs

reverse :: [Int] -> [Int]
-- testing 60 combinations of argument values
-- looking through 2 candidates of size 1
-- looking through 1 candidates of size 2
-- looking through 1 candidates of size 3
-- looking through 3 candidates of size 4
-- looking through 1 candidates of size 5
-- looking through 14 candidates of size 6
-- looking through 29 candidates of size 7
reverse xs  =  foldr (flip (++) . unit) [] xs

sort :: [Int] -> [Int]
-- testing 60 combinations of argument values
-- looking through 2 candidates of size 1
-- looking through 1 candidates of size 2
-- looking through 0 candidates of size 3
-- looking through 2 candidates of size 4
sort xs  =  foldr insert [] xs

(++) :: [Int] -> [Int] -> [Int]
-- testing 60 combinations of argument values
-- looking through 3 candidates of size 1
-- looking through 0 candidates of size 2
-- looking through 8 candidates of size 3
-- looking through 4 candidates of size 4
xs ++ ys  =  foldr (:) ys xs

