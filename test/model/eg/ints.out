second :: [Int] -> Int
-- looking through 636 candidates, 100% match, 47/47 assignments
second xs  =  head (tail xs)

third :: [Int] -> Int
-- looking through 636 candidates, 100% match, 34/34 assignments
third xs  =  head (tail (tail xs))

sum :: [Int] -> Int
-- looking through 636 candidates, 13% match, 5/37 assignments
sum xs  =  if null (tail xs) then head xs else sum xs

product :: [Int] -> Int
-- looking through 636 candidates, 13% match, 5/37 assignments
product xs  =  if null (tail xs) then head xs else product xs

sum :: [Int] -> Int
-- looking through 15 candidates, 100% match, 37/37 assignments
sum xs  =  foldr (+) 0 xs

product :: [Int] -> Int
-- looking through 15 candidates, 100% match, 37/37 assignments
product xs  =  foldr (*) 1 xs

