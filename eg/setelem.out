elem :: Int -> [Int] -> Bool
-- testing 60 combinations of argument values
-- pruning with 44/57 rules
-- looking through 2 candidates of size 1
-- looking through 3 candidates of size 2
-- looking through 5 candidates of size 3
-- looking through 28 candidates of size 4
-- looking through 73 candidates of size 5
-- looking through 119 candidates of size 6
-- looking through 277 candidates of size 7
-- looking through 895 candidates of size 8
elem x []  =  False
elem x (y:xs)  =  x == y || elem x xs

set :: [Int] -> Bool
-- testing 60 combinations of argument values
-- pruning with 46/57 rules
-- looking through 2 candidates of size 1
-- looking through 3 candidates of size 2
-- looking through 7 candidates of size 3
-- looking through 19 candidates of size 4
-- looking through 35 candidates of size 5
-- looking through 81 candidates of size 6
-- looking through 229 candidates of size 7
-- looking through 546 candidates of size 8
set []  =  True
set (x:xs)  =  not (elem x xs) && set xs

