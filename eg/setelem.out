elem :: Int -> [Int] -> Bool
-- testing 360 combinations of argument values
-- pruning with 44/57 rules
-- looking through 2 candidates of size 1
-- looking through 3 candidates of size 2
-- looking through 5 candidates of size 3
-- looking through 24 candidates of size 4
-- looking through 65 candidates of size 5
-- looking through 112 candidates of size 6
-- looking through 265 candidates of size 7
-- looking through 794 candidates of size 8
-- tested 623 candidates
elem x []  =  False
elem x (y:xs)  =  x == y || elem x xs

set :: [Int] -> Bool
-- testing 360 combinations of argument values
-- pruning with 46/57 rules
-- looking through 2 candidates of size 1
-- looking through 2 candidates of size 2
-- looking through 5 candidates of size 3
-- looking through 11 candidates of size 4
-- looking through 20 candidates of size 5
-- looking through 47 candidates of size 6
-- looking through 136 candidates of size 7
-- looking through 348 candidates of size 8
-- tested 256 candidates
set []  =  True
set (x:xs)  =  not (elem x xs) && set xs

